/*****************************************************************************/
/*  Math Spatial Engine - Open source 2D geometry algorithm library          */
/*                                                                           */
/*  Copyright (C) 2013-2024 Merlot.Rain                                      */
/*                                                                           */
/*  This library is free software, licensed under the terms of the GNU       */
/*  General Public License as published by the Free Software Foundation,     */
/*  either version 3 of the License, or (at your option) any later version.  */
/*  You should have received a copy of the GNU General Public License        */
/*  along with this program.  If not, see <http://www.gnu.org/licenses/>.    */
/*****************************************************************************/

#ifndef NMEA_H
#define NMEA_H

#include <mathse.h>

#ifdef __cplusplus
extern "C" {
#endif

#define NMEA_MAXSAT    (12)
#define NMEA_SATINPACK (4)
#define NMEA_NSATPACKS (NMEA_MAXSAT / NMEA_SATINPACK)

/**
 * Information about satellite
 * \see nmeaSATINFO
 * \see nmeaGPGSV
 */
struct nmeaSATELLITE {
    int id;      ///< Satellite PRN number
    int in_use;  ///< Used in position fix
    int elv;     ///< Elevation in degrees, 90 maximum
    int azimuth; ///< Azimuth, degrees from true north, 000 to 359
    int sig;     ///< Signal, 00-99 dB
};

struct nmeaTIME {
    int year; ///< Years since 1900
    int mon;  ///< Months since January - [0,11]
    int day;  ///< Day of the month - [1,31]
    int hour; ///< Hours since midnight - [0,23]
    int min;  ///< Minutes after the hour - [0,59]
    int sec;  ///< Seconds after the minute - [0,59]
    int msec; ///< Thousandths part of second - [0,999]
};


/**
 * \brief Get time now to nmeaTIME structure
 */
void nmea_time_now( nmeaTIME *t );

/**
 * NMEA packets type which parsed and generated by library
 */
enum nmeaPACKTYPE {
    GPNON = 0x0000, ///< Unknown packet type.
    GPGGA = 0x0001, ///< GGA - Essential fix data which provide 3D location and
                    ///< accuracy data.
    GPGSA = 0x0002, ///< GSA - GPS receiver operating mode, SVs used for
                    ///< navigation, and DOP values.
    GPGSV = 0x0004, ///< GSV - Number of SVs in view, PRN numbers, elevation,
                    ///< azimuth & SNR values.
    GPRMC = 0x0008, ///< RMC - Recommended Minimum Specific GPS/TRANSIT Data.
    GPVTG = 0x0010, ///< VTG - Actual track made good and speed over ground.
    GPGST = 0x0012, ///< GST - GPS Pseudorange Noise Statistics
    HCHDG = 0x0020, ///< HDG - Heading, Deviation and Variation
    HCHDT = 0x0100, ///< HDT - Heading reference to true north
};

/**
 * GGA packet information structure (Global Positioning System Fix Data)
 */
struct nmeaGPGGA {
    struct nmeaTIME utc; ///< UTC of position (just time)
    double lat;          ///< Latitude in NDEG - [degree][min].[sec/60]
    char ns;             ///< [N]orth or [S]outh
    double lon;          ///< Longitude in NDEG - [degree][min].[sec/60]
    char ew;             ///< [E]ast or [W]est
    int sig; ///< GPS quality indicator (0 = Invalid; 1 = Fix; 2 = Differential,
             ///< 3 = Sensitive)
    int satinuse;   ///< Number of satellites in use (not those in view)
    double HDOP;    ///< Horizontal dilution of precision
    double elv;     ///< Antenna altitude above/below mean sea level (geoid)
    char elv_units; ///< [M]eters (Antenna height unit)
    double diff; ///< Geoidal separation (Diff. between WGS-84 earth ellipsoid
                 ///< and mean sea level. '-' = geoid is below WGS-84 ellipsoid)
    char diff_units; ///< [M]eters (Units of geoidal separation)
    double dgps_age; ///< Time in seconds since last DGPS update
    int dgps_sid;    ///< DGPS station ID number
};

/**
 * GST packet information structure (GPS Pseudorange Noise Statistics)
 */
struct nmeaGPGST {
    struct nmeaTIME utc; ///< UTC of position fix
    double rms_pr; ///< RMS value of the pseudorange residuals; Includes carrier
                   ///< phase residuals during periods of RTK (float) and RTK
                   ///< (fixed) processing
    double
        err_major; ///< Error ellipse semi-major axis 1 sigma error, in meters
    double
        err_minor;  ///< Error ellipse semi-minor axis 1 sigma error, in meters
    double err_ori; ///< Error ellipse orientation, degrees from true north
    double sig_lat; ///< Latitude 1 sigma error, in meters
    double sig_lon; ///< Longitude 1 sigma error, in meters
    double sig_alt; ///< Height 1 sigma error, in meters
};

/**
 * GSA packet information structure (Satellite status)
 */
struct nmeaGPGSA {
    char fix_mode; ///< Mode (M = Manual, forced to operate in 2D or 3D; A =
                   ///< Automatic, 3D/2D)
    int fix_type; ///< Type, used for navigation (1 = Fix not available; 2 = 2D;
                  ///< 3 = 3D)
    int sat_prn[NMEA_MAXSAT]; ///< PRNs of satellites used in position fix (null
                              ///< for unused fields)
    double PDOP;              ///< Dilution of precision
    double HDOP;              ///< Horizontal dilution of precision
    double VDOP;              ///< Vertical dilution of precision
    char pack_type;           ///< P=GPS, N=generic, L=GLONASS

} nmeaGPGSA;

/**
 * GSV packet information structure (Satellites in view)
 */
struct nmeaGPGSV {
    int pack_count; ///< Total number of messages of this type in this cycle
    int pack_index; ///< Message number
    int sat_count;  ///< Total number of satellites in view
    char pack_type; ///< P=GPS - S=SBas - N=generic - L=GLONAS - A=GALILEO -
                    ///< B=BEIDOU - Q=QZSS
    struct nmeaSATELLITE sat_data[NMEA_SATINPACK];
};

/**
 * RMC packet information structure (Recommended Minimum sentence C)
 */
struct nmeaGPRMC {
    struct nmeaTIME utc; ///< UTC of position
    char status;         ///< Status (A = active or V = void)
    double lat;          ///< Latitude in NDEG - [degree][min].[sec/60]
    char ns;             ///< [N]orth or [S]outh
    double lon;          ///< Longitude in NDEG - [degree][min].[sec/60]
    char ew;             ///< [E]ast or [W]est
    double speed;        ///< Speed over the ground in knots
    double direction;    ///< Track angle in degrees True
    double declination; ///< Magnetic variation degrees (Easterly var. subtracts
                        ///< from true course)
    char declin_ew;     ///< [E]ast or [W]est
    char mode;          ///< Mode indicator of fix type (A = autonomous, D =
               ///< differential, E = estimated, N = not valid, S = simulator)
    char navstatus; ///< NMEA v4.1 - Navigation Status type (S = Safe, C =
                    ///< Caution, U = Unsafe, V = Navigational status not valid)
};

/**
 * VTG packet information structure (Track made good and ground speed)
 */
struct nmeaGPVTG {
    double dir; ///< True track made good (degrees)
    char dir_t; ///< Fixed text 'T' indicates that track made good is relative
                ///< to true north
    double dec; ///< Magnetic track made good
    char dec_m; ///< Fixed text 'M'
    double spn; ///< Ground speed, knots
    char spn_n; ///< Fixed text 'N' indicates that speed over ground is in knots
    double spk; ///< Ground speed, kilometers per hour
    char spk_k; ///< Fixed text 'K' indicates that speed over ground is in
                ///< kilometers/hour
};

/**
 * HDT packet information structure (Heading from True North)
 */
struct nmeaGPHDT {
    double heading; ///< Heading in degrees
    char t_flag; ///< Fixed text 'T' indicates that heading is relative to true
                 ///< north
};

/**
 * HCHDG packet information structure (magnetic heading)
 */
struct nmeaHCHDG {
    double mag_heading;   ///< Magnetic sensor heading (degrees)
    double mag_deviation; ///< Magnetic deviation (degrees)
    char ew_deviation;    ///< [E]ast or [W]est
    double mag_variation; ///< Magnetic variation (degrees)
    char ew_variation;    ///< [E]ast or [W]est
};

/**
 * HDT packet information structure (Heading, )
 */
struct nmeaHCHDT {
    double direction; ///< Heading respect to true north (degrees)
    char t_flag;      ///< Static text [T]
};


EXTERN void nmea_zero_GPGGA(STRUCT nmeaGPGGA *pack );
EXTERN void nmea_zero_GPGST(STRUCT nmeaGPGST *pack );
EXTERN void nmea_zero_GPGSA(STRUCT nmeaGPGSA *pack );
EXTERN void nmea_zero_GPGSV(STRUCT nmeaGPGSV *pack );
EXTERN void nmea_zero_GPRMC(STRUCT nmeaGPRMC *pack );
EXTERN void nmea_zero_GPVTG(STRUCT nmeaGPVTG *pack );

/**
 * Position data in fractional degrees or radians
 */
struct nmeaPOS
{
  double lat;         //!< Latitude
  double lon;         //!< Longitude

};

/**
 * Information about satellite
 * \see nmeaSATINFO
 * \see nmeaGPGSV
 */
struct nmeaSATELLITE
{
  int     id;         //!< Satellite PRN number
  int     in_use;     //!< Used in position fix
  int     elv;        //!< Elevation in degrees, 90 maximum
  int     azimuth;    //!< Azimuth, degrees from true north, 000 to 359
  int     sig;        //!< Signal, 00-99 dB

};

/**
 * Information about all satellites in view
 * \see nmeaINFO
 * \see nmeaGPGSV
 */
struct nmeaSATINFO
{
  int     inuse;      //!< Number of satellites in use (not those in view)
  int     inview;     //!< Total number of satellites in view
  struct nmeaSATELLITE sat[NMEA_MAXSAT]; //!< Satellites information

};

/**
 * Summary GPS information from all parsed packets,
 * used also for generating NMEA stream
 * \see nmea_parse
 * \see nmea_GPGGA2info, nmea_...2info
 */
struct nmeaINFO
{
  int     smask;      //!< Mask specifying types of packages from which data have been obtained

  struct nmeaTIME utc;       //!< UTC of position

  int     sig;        //!< GPS quality indicator (0 = Invalid; 1 = Fix; 2 = Differential, 3 = Sensitive)
  int     fix;        //!< Operating mode, used for navigation (1 = Fix not available; 2 = 2D; 3 = 3D)

  double  PDOP;       //!< Position Dilution Of Precision
  double  HDOP;       //!< Horizontal Dilution Of Precision
  double  VDOP;       //!< Vertical Dilution Of Precision

  double  lat;        //!< Latitude in NDEG - +/-[degree][min].[sec/60]
  double  lon;        //!< Longitude in NDEG - +/-[degree][min].[sec/60]
  double  elv;        //!< Antenna altitude above/below mean sea level (geoid) in meters
  double  speed;      //!< Speed over the ground in kilometers/hour
  double  direction;  //!< Track angle in degrees True
  double  declination; //!< Magnetic variation degrees (Easterly var. subtracts from true course)
  double  rms_pr;     //!< RMS value of the pseudorange residuals; includes carrier phase residuals during periods of RTK (float) and RTK (fixed) processing
  double  err_major;  //!< Error ellipse semi-major axis 1 sigma error, in meters
  double  err_minor;  //!< Error ellipse semi-minor axis 1 sigma error, in meters
  double  err_ori;    //!< Error ellipse orientation, degrees from true north
  double  sig_lat;    //!< Latitude 1 sigma error, in meters
  double  sig_lon;    //!< Longitude 1 sigma error, in meters
  double  sig_alt;    //!< Height 1 sigma error, in meters

  struct nmeaSATINFO satinfo; //!< Satellites information

};

void nmea_zero_INFO(struct nmeaINFO *info );


EXTERN int nmea_pack_type( const char *buff, int buff_sz );
EXTERN int nmea_find_tail( const char *buff, int buff_sz, int *res_crc );

EXTERN int nmea_parse_GPGGA( const char *buff, int buff_sz, nmeaGPGGA *pack );
EXTERN int nmea_parse_GPGSA( const char *buff, int buff_sz, nmeaGPGSA *pack );
EXTERN int nmea_parse_GPGSV( const char *buff, int buff_sz, nmeaGPGSV *pack );
EXTERN int nmea_parse_GPRMC( const char *buff, int buff_sz, nmeaGPRMC *pack );
EXTERN int nmea_parse_GPVTG( const char *buff, int buff_sz, nmeaGPVTG *pack );
EXTERN int nmea_parse_HCHDG( const char *buff, int buff_sz, nmeaHCHDG *pack );
EXTERN int nmea_parse_HCHDT( const char *buff, int buff_sz, nmeaHCHDT *pack );
EXTERN int nmea_parse_GPGST( const char *buff, int buff_sz, nmeaGPGST *pack );
EXTERN int nmea_parse_GPHDT( const char *buff, int buff_sz, nmeaGPHDT *pack );

EXTERN void nmea_GPGGA2info( nmeaGPGGA *pack, nmeaINFO *info );
EXTERN void nmea_GPGST2info( nmeaGPGST *pack, nmeaINFO *info );
EXTERN void nmea_GPGSA2info( nmeaGPGSA *pack, nmeaINFO *info );
EXTERN void nmea_GPGSV2info( nmeaGPGSV *pack, nmeaINFO *info );
EXTERN void nmea_GPRMC2info( nmeaGPRMC *pack, nmeaINFO *info );
EXTERN void nmea_GPVTG2info( nmeaGPVTG *pack, nmeaINFO *info );


/*
 * degree VS radian
 */

EXTERN double nmea_degree2radian( double val );
EXTERN double nmea_radian2degree( double val );

/*
 * NDEG (NMEA degree)
 */

EXTERN double nmea_ndeg2degree( double val );
EXTERN double nmea_degree2ndeg( double val );

EXTERN double nmea_ndeg2radian( double val );
EXTERN double nmea_radian2ndeg( double val );

/*
 * DOP
 */

EXTERN double nmea_calc_pdop( double hdop, double vdop );
EXTERN double nmea_dop2meters( double dop );
EXTERN double nmea_meters2dop( double meters );

/*
 * positions work
 */

EXTERN void nmea_info2pos( const nmeaINFO *info, nmeaPOS *pos );
EXTERN void nmea_pos2info( const nmeaPOS *pos, nmeaINFO *info );

EXTERN double nmea_distance(
  const nmeaPOS *from_pos,
  const nmeaPOS *to_pos
);

EXTERN double nmea_distance_ellipsoid(
  const nmeaPOS *from_pos,
  const nmeaPOS *to_pos,
  double *from_azimuth,
  double *to_azimuth
);

EXTERN int nmea_move_horz(
  const nmeaPOS *start_pos,
  nmeaPOS *end_pos,
  double azimuth,
  double distance
);

EXTERN int nmea_move_horz_ellipsoid(
  const nmeaPOS *start_pos,
  nmeaPOS *end_pos,
  double azimuth,
  double distance,
  double *end_azimuth
);


#ifdef __cplusplus
}
#endif

#endif
